----- 로깅정책
0. 기본정책
. @Slf4j 활용

1. How To
application.yml 설정
  logging:
    pattern:
      console: "%-5level %d{HH:mm:ss.SSS} %logger[%method:%line] - %msg%n"
    level:
      bts: DEBUG

<code>
log.debug("테스트 로그입니다.");

----- Trace 정책
0. Istio & jaeger기반

1. How To
None

2. 이슈
- spring-cloud-starter-openfeign 이슈
   . Spring Cloud:2020.0.0버전에서 jaeger tracing이 안됨
   . jaeger환경에서 ribbon에서 제공했던 LoadBalancerFeignClient 클래스를 못찾는 Error 발생
   . 2020.0.0에서 spring-cloud-netflix-ribbon 제거됨(Spring Cloud 2020.0 Release Notes)
   . Spring Boot 2.3.9.RELEASE(Spring Cloud Hoxton.SR10)에서는 정상동작 확인
   . bts 표준은 2.4.x


----- 서비스 내 Exception 정책
0. 기본정책
. Exception처리는 @Service Layer에서 수행한다.
. 처리방식 3가지(Exception 전환/Exception 종료/Exception 회피)

1. How To

1.1 Exception 전환(대부분 Exception 처리방식/95%이상)
. 명시적으로 catch 하고자 하는 Exception만 처리한다
. 메시지 코드를 셋팅하고 throw new BTSException()한다

<code>
try {
    TempUtil temp = new TempUtil();
    temp.getTemp();
} catch (FileNotFoundException e) {
    throw new BTSException("otw.delivery.retrieve.success", e);
}

1.2 Exception 종료(3%)
. Exception을 종료한다

<code>
int count = 0;
try {
    TempUtil temp = new TempUtil();
    temp.getTemp();
} catch (FileNotFoundException e) {
    count++;
    dto.setCount(count);
}

1.3 Exception 회피(1%)
. 나를 호출하는 서비스에게 Exception 처리를 전가한다.

<code>
public List<DeliveryDto> getAll() throws FileNotFoundException {
...
try {
    TempUtil temp = new TempUtil();
    temp.getTemp();
} catch (FileNotFoundException e) {
    throw e;
}

----- 서비스 호출(Feign) Exception 정책
0. 기본정책
. Json<T> 결과여부로 판단한다.

1. How To
<code>
Json<DeliveryDto> jsonDeliveryDto = deliveryClient.getDeliveryInfo(orderMaster.getDeliveryNo());
if(jsonDeliveryDto.isError())
  throw new BTSException("otw.delivery.retrieve.error");


----- Transaction
0. 기본정책
. Spring @Transactional(선언적 트랜잭션) 적용
. 반드시 public 메서드에 적용
. 모든 @Service 클래스에 설정 @Transactional(value = "transactionManager", readOnly = true)
  * readOnly속성은 h2에서 지원하지 않음. mysql 5.6.5부터 지원
. INSERT, UPDATE, DELET 메소드에서 @Transactional을 설정하지 않으면 Exception 발생

1. How To
<code>
@Service
@Transactional(value = "transactionManager", readOnly = true)
public class OrderService {
  ...
  @Transactional(value = "transactionManager")
  public Object createOrderInfo(OrderDto orderDto) {
    stocktMapper.update(orderDto.getStock());
    orderMapper.create(orderDto);
  }

  public Object retrieveOrderInfo(OrderDto orderDto) {
    stocktMapper.selectStock(orderDto.getStock());
    orderMapper.selectOrder(orderDto);
  }

----- 서비스간(분산) Transactiona
- 보상 Transaction(rollback 기능) 구현 수준
  * fallback(Circuit Breaker:장애전파방지)
- 서비스간(분산) transaction 코딩 표준

1. 동기
2. 비동기(SAGA)
