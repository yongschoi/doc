----- DB접속 환경 정의
      -- mybatis 기반
         . application.yml

----- 업무 Message(다국어) 처리(cj.enmframework.util)
      -- spring.messages 적용
         . MessageUtil

----- 시스템 공통 Type 정의(cj.enmframework.model)
      -- Json<T> (As-Is 시스템 참고)
      -- spring.messages 연계
         . CommonJson
         . Json

----- Exception 구조 정의(cj.enmframework.exception)
      -- Json<T> 연계
         . BusinessException
         . SystemException
         . ExceptionAdvice

----- Data Validation
      -- spring-boot-starter-validation 적용

----- Open API 적용(cj.enmframework.config)
      -- springdoc-openapi-ui(Swagger)
         . OpenAPIConfig

----- Rest API 정의(cj.enmframework.config/cj.enmframework.api)
      -- RestTemplate 기반
         . RestAPIConfig
         . ObjectMapperConfig
         . RestAPI

----- Template Code 작업
      -- 메시지 전송 시나리오(cj.enm.json)
         . JsonController
         . FakeService

      -- mybatis 시나리오(cj.enm.mybatis)
         . MybatisConfig
         . UserController
         . UserService
         . UserMapper
         . UserVo

      -- open API 시나리오(cj.enm.openapi)
         . CoffeeVoController
         . TeaController
         . CoffeeVo
         . TeaVo

      -- Rest API 호출 시나리오(cj.enm.rest)
         . ProductController
         . productService
         . ProductVo
         . SearchVo
         -----
         Caller 서비스 구성

      -- data validation 시나리오(cj.enm.validation)
         . ValidMessageConstants
         . MemberController
         . MemberDto

----- 2/25 --------------------------------------------------------------------

----- Kafka API 정의(cj.enmframework.config/cj.enmframework.api)
      -- spring-kafka, Callback 로직 추가
         . KafkaAPI

----- Kafka 모듈 변경 및 package 재정의
      -- pub
         . CardController
         . CardService
         . OrderDto
      -- sub
         . CashSubscriber
         . CashService
         . OrderDto

----- Feign 적용 시나리오 작업
      -- or-ord-svc(주문) 프로젝트 구성
         . OrderController
         . OrderService
         . OrderMapper
         . DeliveryClient
      -- fu-otw-svc(배송) 프로젝트 구성
         . DeliveryController
         . DeliveryService
         . DeliveryMapper

2021/03/02
----- 모델변환(Entity-Dto) Utility 개발
      -- fw-core-lib
         . modelmapper2.3.9 적용 및 mapList() 구현
         . ModelMapperUtil 개발완료

----- Spring GroupId/Package 구조 적용
      -- cj.bts/cj.bts 리엔지니어링

2021/03/03
----- fw-feign-lib 프로토타이핑
      -- cj.bts.framework.feign.FeignConfig
         . Open Feign 적용
         . Spring Cloud POM 설정, Connection/Read Timeout, log level 설정

----- 로그 format 정의
      -- @Slf4j 활용
         . application.yml 설정완료
           logging:
             pattern:
               console: "%-5level %d{HH:mm:ss.SSS} %logger[%method:%line] - %msg%n"
             level:
               bts: DEBUG

----- fw-core-lib, fw-kafka-lib Wiki 작성완료

2021/03/04
----- jaeger기반 Trace id 테스트
      -- spring-cloud-starter-openfeign 이슈
         . Spring Cloud:2020.0.0버전에서 jaeger tracing이 안됨
         . jaeger환경에서 ribbon에서 제공했던 LoadBalancerFeignClient 클래스를 못찾는 Error 발생
         . 2020.0.0에서 spring-cloud-netflix-ribbon 제거됨(Spring Cloud 2020.0 Release Notes)
         . Spring Boot 2.3.9.RELEASE(Spring Cloud Hoxton.SR10)에서는 정상동작 확인
         . bts 표준은 2.4.x

----- 웹스퀘어 JSON 타입 이슈 확인
      { string : value }
      -- JSON
         {"id":"test", "name":"홍길동", "age":24}
      -- 웹스퀘어
         user: {"id":"test", "name":"홍길동", "age":24}

2021/03/05
----- 아키텍처 공유회의(w/강백규, 이성진, 박정삼, 모성훈)

----- Kafak/Feign 호출 시나리오 작업
      -- 주문
         1. 주문데이터 생성 후 pub:
            OrderController -> OrderService -> (Kafka)
         2. 결제서비스 sub 후 DB저장: cj.bts.fw.tpl.payment
            (Kafka) -> PaymentSubscriber -> PaymentService -> PaymentMapper
         3. 주문정보 저장 : cj.bts.fw.tpl.order
            OrderService -> OrderMapper
         4. 상품서비스 rest호출-> ProductClient -> (Feign)
         4. 상품정보 조회(Feign) : cj.bts.fw.tpl.product
            (Feign) -> ProductController -> ProductService -> ProductMapper
         5. 주문결과 리턴        :

2021/03/08
----- Transaction 표준 적용 테스트
      -- @Transactional readOnly속성 활용
         <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
         </dependency>

----- 시스템 속성(DB컬럼) transfer 설계
      -- 입력ID, 입력일시, 입력IP주소, 수정ID, 수정일시, 수정IP주소
         . HandlerMethodArgumentResolver 방식
         . threadlocal 방식
           https://dzone.com/articles/an-alternative-approach-to-threadlocal-using-sprin-1

2021/03/09
----- 아키텍처 공유회의(w/전체)

----- Feign Exception 테스트 및 프로토타이핑
      -- 기본 feign Error 처리
         . callee 서비스 Connection refused -> feign.RetryableException 500
         . caller 잘못된 api 호출 error -> feign.FeignException 404

----- fw-feign-lib 개발
      . FeignConfig
      . FeignExceptionAdvice



























































2021/03/10
----- Exception/Transaction 정책수립 및 가이드 초안 작업

----- fw-kafka-lib
      -- ProduceConfiguration/ConsumerConfiguration 클래스 Vs application.yml 방식
         . @Configuration 클래스
           - 장점: 각 서비스에서 Kafka관련 설정 최소화
           - 단점: Pub만 하는 서비스에서 ConsumerConfiguration Bean도 생성됨
         . 현재는 application.yml에서 설정하는 방식 유지
         . 멀티 Consumer가 필요할 경우 @Configuration방식 고려

2021/03/11
----- HandlerMethodArgumentResolver 분석
