----- DB접속 환경 정의
      -- mybatis 기반
         . application.yml

----- 업무 Message(다국어) 처리(cj.enmframework.util)
      -- spring.messages 적용
         . MessageUtil

----- 시스템 공통 Type 정의(cj.enmframework.model)
      -- Json<T> (As-Is 시스템 참고)
      -- spring.messages 연계
         . CommonJson
         . Json

----- Exception 구조 정의(cj.enmframework.exception)
      -- Json<T> 연계
         . BusinessException
         . SystemException
         . ExceptionAdvice

----- Data Validation
      -- spring-boot-starter-validation 적용

----- Open API 적용(cj.enmframework.config)
      -- springdoc-openapi-ui(Swagger)
         . OpenAPIConfig

----- Rest API 정의(cj.enmframework.config/cj.enmframework.api)
      -- RestTemplate 기반
         . RestAPIConfig
         . ObjectMapperConfig
         . RestAPI

----- Template Code 작업
      -- 메시지 전송 시나리오(cj.enm.json)
         . JsonController
         . FakeService

      -- mybatis 시나리오(cj.enm.mybatis)
         . MybatisConfig
         . UserController
         . UserService
         . UserMapper
         . UserVo

      -- open API 시나리오(cj.enm.openapi)
         . CoffeeVoController
         . TeaController
         . CoffeeVo
         . TeaVo

      -- Rest API 호출 시나리오(cj.enm.rest)
         . ProductController
         . productService
         . ProductVo
         . SearchVo
         -----
         Caller 서비스 구성

      -- data validation 시나리오(cj.enm.validation)
         . ValidMessageConstants
         . MemberController
         . MemberDto

----- 2/25 --------------------------------------------------------------------

----- Kafka API 정의(cj.enmframework.config/cj.enmframework.api)
      -- spring-kafka, Callback 로직 추가
         . KafkaAPI

----- Kafka 모듈 변경 및 package 재정의
      -- pub
         . CardController
         . CardService
         . OrderDto
      -- sub
         . CashSubscriber
         . CashService
         . OrderDto

----- Feign 적용 시나리오 작업
      -- or-ord-svc(주문) 프로젝트 구성
         . OrderController
         . OrderService
         . OrderMapper
         . DeliveryClient
      -- fu-otw-svc(배송) 프로젝트 구성
         . DeliveryController
         . DeliveryService
         . DeliveryMapper

2021/03/02
----- 모델변환(Entity-Dto) Utility 개발
      -- fw-core-lib
         . modelmapper2.3.9 적용 및 mapList() 구현
         . ModelMapperUtil 개발완료

----- Spring GroupId/Package 구조 적용
      -- cj.bts/cj.bts 리엔지니어링

2021/03/03
----- fw-feign-lib 프로토타이핑
      -- cj.bts.framework.feign.FeignConfig
         . Open Feign 적용
         . Spring Cloud POM 설정, Connection/Read Timeout, log level 설정
         . Feign default Connetion/Read Timeout(10s/60s), log(NONE)
         . fw-feign-lib default Connetion/Read Timeout(5s/5s), log(BASIC)

----- 로그 format 정의
      -- @Slf4j 활용
         . application.yml 설정완료
           logging:
             pattern:
               console: "%-5level %d{HH:mm:ss.SSS} %logger[%method:%line] - %msg%n"
             level:
               bts: DEBUG

----- fw-core-lib, fw-kafka-lib Wiki 작성완료

2021/03/04
----- jaeger기반 Trace id 테스트
      -- spring-cloud-starter-openfeign 이슈
         . Spring Cloud:2020.0.0버전에서 jaeger tracing이 안됨
         . jaeger환경에서 ribbon에서 제공했던 LoadBalancerFeignClient 클래스를 못찾는 Error 발생
         . 2020.0.0에서 spring-cloud-netflix-ribbon 제거됨(Spring Cloud 2020.0 Release Notes)
         . Spring Boot 2.3.9.RELEASE(Spring Cloud Hoxton.SR10)에서는 정상동작 확인
         . bts 표준은 2.4.x

----- 웹스퀘어 JSON 타입 이슈 확인
      { string : value }
      -- JSON
         {"id":"test", "name":"홍길동", "age":24}
      -- 웹스퀘어
         user: {"id":"test", "name":"홍길동", "age":24}

2021/03/05
----- 아키텍처 공유회의(w/강백규, 이성진, 박정삼, 모성훈)

----- Kafak/Feign 호출 시나리오 작업
      -- 주문
         1. 주문데이터 생성 후 pub:
            OrderController -> OrderService -> (Kafka)
         2. 결제서비스 sub 후 DB저장: cj.bts.fw.tpl.payment
            (Kafka) -> PaymentSubscriber -> PaymentService -> PaymentMapper
         3. 주문정보 저장 : cj.bts.fw.tpl.order
            OrderService -> OrderMapper
         4. 상품서비스 rest호출-> ProductClient -> (Feign)
         4. 상품정보 조회(Feign) : cj.bts.fw.tpl.product
            (Feign) -> ProductController -> ProductService -> ProductMapper
         5. 주문결과 리턴        :

2021/03/08
----- Transaction 표준 적용 테스트
      -- @Transactional readOnly속성 활용
         <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
         </dependency>

----- 시스템 속성(DB컬럼) 적용방안
      -- 입력ID, 입력일시, 입력IP주소, 수정ID, 수정일시, 수정IP주소
         . HandlerMethodArgumentResolver 방식
         . threadlocal 방식
           https://dzone.com/articles/an-alternative-approach-to-threadlocal-using-sprin-1

2021/03/09
----- 아키텍처 공유회의(w/전체)

----- Feign Exception 테스트 및 프로토타이핑
      -- 기본 feign Exception 처리
         . callee 서비스: Connection refused -> feign.RetryableException 500
         . caller 서비스: 잘못된 api 호출 error -> feign.FeignException 404

----- fw-feign-lib 개발
      . FeignConfig
      . FeignExceptionAdvice

2021/03/10
----- 분산(서비스간) Transaction 프로토타이핑
      . 로컬 Transaction 선행 처리 후, A 서비스 Transaction 처리
      . A 서비스 Transaction 선행 처리 후, 로컬 Transaction 처리

2021/03/11
----- fw-kafka-lib
      . KafkaAPI Exception 표준 적용 및 테스트

----- How-to-로깅 가이드 작성
----- How-to-Message 가이드 작성
----- How-to-Validation 가이드 작성
----- How-to-Exception 가이드 작성

2021/03/12
----- 분산(서비스간) Transaction 프로토타이핑
      . 다중 서비스 Transaction

----- How-to-Transaction(로컬) 가이드 작성
----- How-to-Transaction(Synchronous-분산) 가이드 작성

2021/03/15
----- How-to-Transaction(Synchronous-분산) 가이드 작성

----- Spring Cloud Config 검토
      . 설정정보를 동적으로 변경하여 (애플리케이션의 재빌드나, 재구동 없이) 실시간으로 반영시킬 수 있도록 하는 메커니즘을 제공
      . client --> server --> git

----- Spring Boot 2.4.X Breaking changes
      1. netflix-hystix, ribbon, zuul 제거
      2. spring-cloud-netflix-ribbon 제거로 jaeger기반 trace 안됨.
      3. Bootstrap has been disabled by default(spring.config.import 이용)

2021/03/16
----- Spring Cloud Bus 검토
      <!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-bus-kafka -->
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-bus-kafka</artifactId>
        <version>3.0.1</version>
      </dependency>

2021/03/17
----- fw-core-lib (dependency org.springframework.boot)
      -- spring-boot-starter-actuator
         . Application status(health, properties 등)
         . Spring Config refresh
      -- CORS Configuration

----- fw-cloud-lib (dependency org.springframework.cloud)
      -- Cloud Config
         . Spring Cloud Config
         . Spring Cloud Bus
      -- Service Trace
         . Jaeger
      -- Openfeign
         . Rest Call - default connection/read time(5s/5s), log basic

----- zipkin 검토

2021/03/18
----- Spring Boot 버전변경
      . 2.4.3 -> 2.3.9.RELEASE

----- fw-cloud-lib (dependency org.springframework.cloud) 계속
      -- Cloud Config 테스트
      -- Service Trace 테스트
      -- Openfeign 테스트

2021/03/19
----- How To-ModelMapper 작성
----- How To-OpenAPI 작성
----- fw-cloud-lib 사용가이드 작성
----- How To-Feign 작성

----- 프레임워크 회의(w/박민수, 주문팀SM)


2021/03/22
----- 프레임워크 요구사항(3/19) 반영
      . 다중 message files 추가기능 개발
      . log MDC 적용 테스트

----- 프레임워크 wiki 업데이트
      . How To-OpenFeign 수정
      . How To-Exception 내용 수정
      . How To-Message 추가기능 사용법























































2021/03/XX
----- HandlerMethodArgumentResolver 작동원리
      . HttpServletRequestArgumentFactory<T, HttpServletRequest>
      . OperationFactory
      . OperationArgumentResolver

2021/03/XX
----- fw-kafka-lib
      -- ProduceConfiguration/ConsumerConfiguration 클래스 Vs application.yml 방식
         . @Configuration 클래스
           - 장점: 각 서비스에서 Kafka관련 설정 최소화
           - 단점: Pub만 하는 서비스에서 ConsumerConfiguration Bean도 생성됨
         . 현재는 application.yml에서 설정하는 방식 유지
         . 멀티 Consumer가 필요할 경우 @Configuration방식 고려

2021/03/XX
----- Jaeger Trace ID 기반 Transaction관리
      . Jaeger Trace 설정하면 Service Error() 확인가능하나
      . 어떤 data가 실패했는지는 확인이 불가능함
      . TransactionLog.start(T data)와 같은 컴포넌트에 data 를 넘겨주고
      . 내부적으로 @Transactional(Propagation.REQUIRES_NEW)로 traceId와 data를 저장하고
      . TransactionLog.end()에서 해당 traceId를 삭제한다.
