----- Exception 정책
0. 기본정책
. Exception처리 결과를 Message로 던질경우 BTSException을 사용한다.
. BTSException은 RuntimeException이므로 별도의 throws 처리를 하지 않는다.

1. How To
+ dependency 설정
<dependency>
    <groupId>cj.bts</groupId>
    <artifactId>fw-core-lib</artifactId>
    <version>0.0.1-SNAPSHOT</version>
</dependency>

1.1. Checked Exception 처리
. 대부분 Exception 처리방식(90% 이상)
. 가급적 명시적으로 catch 하고자 하는 Exception만 처리한다
. 메시지 코드와 Exception을 셋팅하고 throw new BTSException()한다

+ 예제코드(Service)
try {
    TempUtil temp = new TempUtil();
    temp.getTemp();
} catch (FileNotFoundException e) {
    throw new BTSException("otw.delivery.retrieve.fail", e);
}

1.2. Unchecked Exception 처리(3%)
. 기본적으로 모든 Unchecked Exception은 자동 처리된다(Internal Server Error, 500 Error)
. 특정 Unchecked Exception에 대한 message설정이 필요한 경우 적용한다

+ 예제코드(Service)
try {
    TempUtil temp = new TempUtil();
    // getTemp()에서 RuntimeException이 발생할 수 있음
    temp.getTemp();
} catch (Exception e) {
    throw new BTSException("otw.delivery.retrieve.fail", e);
}

1.3. 특정 조건에 따라 Exception 처리(5%)
. 메시지 코드를 셋팅하고 throw new BTSException()한다

+ 예제코드(Service)
if(a > B) {
    ...
    ...
    throw new BTSException("otw.delivery.condition.not.acceptable");
}



* 기타 Exception 처리
1. Exception 종료
. 비즈니스 케이스에 따라 Exception을 종료하고 프로그램을 계속 진행한다.

+ 예제코드(Service)
int count = 0;
try {
    TempUtil temp = new TempUtil();
    temp.getTemp();
} catch (FileNotFoundException e) {
    count++;
    dto.setCount(count);
}

2. Exception 회피
. Exception 처리를 전가한다.

+ 예제코드(Service)
public List<DeliveryDto> getAll() throws FileNotFoundException {
...
try {
    TempUtil temp = new TempUtil();
    temp.getTemp();
} catch (FileNotFoundException e) {
    throw e;
}
