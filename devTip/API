----- 원격 통신방식
      - 전문: 데이터 format을 정의하여 소켓통신
        * XML, JSON을 사용하면 Parser가 필요함
      - API(Application Programmin Interface): 어플리케이션 레벨에서 데이터 송수신 ex) Google Map API
        . 원격 API: 인터넷이 아닌 통신 ??
        . 웹 API: HTTP 인터넷 통신으로 XML, JSON
        . SOAP: 프로토콜
        . REST: 아키텍처 스타일

----- API 정책유형
      . Private: 내부에서만 사용
      . Partner: 특정 파트너와 공유
      . Public: 오픈

----- HTTP 통신 VS. Socket 통신
      - HTTP 통신
        . Client가 요청(Request)을 보내는 경우에만 Server가 응답(Response)하는 단방향 통신
        . Response 후에는 연결을 바로 종료
        . 실시간 연결이 아닌 필요한 경우에만 Server로 요청

      - Socket 통신
        . Client Socket과 Server Socket이 IP/Port기반으로 계속 연결을 유지하는 양방향 통신
        . 실시간으로 데이터를 주고받는 상황
        . 동영상 Streaming이나 온라인 게임에 활용
        . https://recipes4dev.tistory.com/153

----- API first Design
      1. API 사용자 관점에서 가장먼저 Design 되어야 한다.(이후 application 개발)
      2. application의 변경은 자주 발생 가능하나 API는 변경이 잦으면 안된다.
      3. 반드시 문서화 되어야 한다.

----- API 찾기
      1. External Gateway 관점
         . 화면 중심으로 도출
         . TX 단위와는 무관하게 서로 다른 서비스 조합
      2. Internal Gateway(Service Mesh) 관점
         . 데이터(업무) 중심으로 도출
         . TX 단위 orchestration

----- API Versioning
      . URI Versioning
        예) http://api.example.com/v1/employee/12345
            http://apiv1.example.com/employee/12345

      . Custom Request Header
        예) http://api.example.com/employee/12345
            Accept-version: v1
            Accept-version: v2

      . Accept Header(Github의 방식)
        예) http://api.example.com/employee/12345
            Accept: application/vnd.example.v1+json
            Accept: application/vnd.example+json;version=1.0

      * Header를 이용할 경우 헤더값을 검사하기 위한 추가적인 로직이 필요함

----- Rest API
      -- Method
         . GET: 멱등성, 안전 보장
         . POST: 멱등성, 안전 보장하지 않음
         . PUT: 멱등성 보장.
                수정되지 않는 데이터도 전송해야함. 해당 데이터가 존재하지 않으면 Create

                PUT /users/1
                {
                  "name": "hak"
                  "level": 11
                }

                수정하고 싶은 값만 보낼 경우 PATCH

                PATCH /users/1
                {
                  "level": 11
                }

         . DELETE: 멱등성 보장.

         . OPTIONS: 지원 가능한 method 응담
         . HEAD: 요청에 대한 Header만 응답한다. body가 없다.
         . PATCH: PUT 대신 PATCH method 권장. 수정할 데이터만 전송
