----- CI/CD 파이프라인
      1. Source Code(형상관리) : developer commit
      2. Build(소스코드 빌드) : automation
      3. Test(단위테스트/소스정적분석) : automation
      4. Dockerize(도커이미지 빌드) : automation
      5. Artifact Storage(도커 이미지 버전관리) : automation
      6. Deploy(배포) : automation
      7. Acceptance Test(승인테스트) : tester
      8. Monitor(모니터링) : operator

----- Jenkins 커스트마이징
      jenkins/jenkins를 docker로 운영할 경우 다음과 같은 항목을 고려해야 한다.
      1. java, 빌드도구(maven, gradle등)를 미리 설치한 image를 사용
      2. Maven repository는 /var/jenkins_home/.m2 에 저장됨.(docker run에서 -v 옵션 필수)
      3. 결과적으로 build는 jenkins 컨테이너에서 수행
      4. application을 도커 image로 build하려면 remote shell을 수행해야 함.
      (/etc/sudoers 파일을 수정하여 접속 사용자에게 sudo 권한 추가)
      5. remote shell 로직에서 error 처리를 하지 않으면 스크립트는 정상처리 되어도 exit_code가 1이 발생하여 jenkins처리결과는 fail이 된다.

      사용해본 결과 jenkins는 docker가 아닌 직접 개발서버(?)에 설치해서 사용하는것이 보다 효과적일 수 있다.
      jenkins를 컨테이너로 운영할 경우에는 jenkins docker에서 개발서버의 shell(git clone, mvn build, image build, deploy등)을 invoke시키는 방식이 가장 효과적이다.(openssh-server 설치 필수)

----- GitLap
      SW개발 전체공정(프로젝트관리, 이슈관리, CI/CD 등)을 하나의 도구로 시각화 함(issue -> merge request -> commit -> build -> test -> deployement)
      single tool에 대한 장단점 ???(Monolith vs. MSA)
      개발공정을 투명화하여, 실무자(개발자, 운영자 등) 성향(표현능력?)과 관계없이 데이터 기반으로 작업 생산성을 객관적으로 관리할 수 있음.

----- slack
      공동 작업을 위한 클라우드 기반 팀 협업 도구. 일종에 기업용 메신저 서비스(SaaS)

----- terraform
      Write, Plan, and Create Infrastructure as a Code
      인프라스트럭처를 코드로서 작성, 계획, 생성하는 도구
      HCL(HashiCorp Configurations Language): 컨테이너로 따지면 Dockerfile

----- Travis CI
      gitHub와 연동이 강요된(?) CI/CD 서비스(SaaS)
      gitHub에 등록된 repository의 프로젝트 root에 위치한 .travis.yml 파일을 인식해서 travis 클라우드(?)에서 해당 프로젝트를 build 및 deploy를 수행함.
      gitHub 프로젝트가 변경되면 자동으로 .travis.yml을 실행함.
      .travis.yml은 별도로 작성해야함.(back-2020-10-21/example-all 프로젝트 참조)
      * shell script는 linux에서 작성하자 !!! 반드시 !!!

----- Ansible : 환경설정 자동화 도구
      . Provisioning: 다양한 서버를 셋업
      . Configuration Management: Application 설정의 변경관리(추적) 및 서비스 시작/중지
      . Application Deployment: 배포 자동화

      - based on Python
      - yaml syntax --> playbooks으로 손쉬운 활용
      - 에이전트 없이 제어 가능(모든 linux에는 Python이 기본으로 설치 되어 있음)

----- 텔레그램 연동
      # Set formatting for the message. Can be either "Markdown" or "HTML"
      curl -s -X POST https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage -d chat_id=$TELEGRAM_CHAT_ID -d parse_mode="Markdown" -d text="전송할 text내용"

----- SRE(Site Reliability Engineering) implements DEVOPS
      - Metric & Monitoring:
      - Capacity Planning:
      - Change Management:
        . 롤링업데이트 - 한대씩 재시작(일반적인 배포방식)
        . 블루/그린 배포 - 블루(구버전)/그린(신버전) Production환경을 구성해 놓고 router를 통해 일부 request를 그린으로 연결
        . 카날리 배포 - router에서 일부사용자들(5%)을 신버전 Production으로 연결. 문제 없으면 전체 사용자를 신버전 Production에 배포
      - Emergency Response: 롤백 절차가 담긴 "Playbook" 필수
      - Culture: 장애 책임을 나눠 가지는 문화
        . 개발팀 - 코드의 품질이 떨어져서
        . 운영팀 - 운영 프로세스가 고도화가 되지 않아서
        . 업무팀 - 무리하게 일정을 잡아서
        --> Error budget 활용

----- SLI (Service Level Indicator) / SLO(Service Level Objective)
      SLO = SLI + 목표값(Goal)
      - SLI : 측정대상
        ex) REST API 호출 응답시간
      - SLO : 목표값(최종 사용자 관점)
        ex) REST API 호출 응답시간이 100ms 이하

      1. 사용자의 기대치에 대해서 가설을 세워서 시작하고 측정하기 쉬운 항목부터 측정해가면서 나중에 실제로 유용한 SLO로 발전 시켜가는 접근 방법이 좋으며,
      2. SLO의 목표값은 낮은 값에서 시작해서 점차적으로 높은 값으로 바꿔 나가는 것이 바람직하다.
      3. SLO의 최소/최대 범위 지정으로 어느정도 버퍼가 있으면 좋다.
      4. SLO가 의사 결정이나 우선 순위 결정에 사용되지 않는다면, 그 SLO와 넓게는 SRI 자체가 잘못된 것

----- Error budget(계획된 다운타임 + 장애시간)
      시스템에 Error budget을 정의하고 경영진 포함하여 컨세서스 하여, 그 budget=0이 되면 더이상 신규 기능을 배포하지 않고, 시스템의 가용성을 높이기 위해서 자동화나 프로세스 개선등의 작업을 수행하거나 강도 높은 application 코드 리뷰를 수행.
      Error budget=0이면 배포를 할 수 없기 때문에 개발팀 입장에서도 테스트를 더 꼼꼼히 하는 등 일부 책임을 갖는 효과가 발생한다.

----- Toil(노역)
      성장에 도움이 되지 않으면서 시간을 잡아먹는 메뉴얼한 작업이고, 서비스 규모가 커지면 커질 수 록 늘어나는 자동화가 가능한 작업

----- 배포 work-around
      배포 실패시 롤백 보다는 빠르게 버그를 수정하며, 특히 기능을 On/Off 할 수 있는 기능을 제공해서, 버그 발생시 그 기능을 꺼 버린다. 버그 수정후 기능 on만 업데이트
