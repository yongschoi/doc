----- Observability
      1) Event Logs
         . timestamp + context
         . debugging 용도
         . 복잡한 분산시스템에서의 장애는 특정 컴포넌트의 특정 이벤트로 발생하는 경우는 드물다
         . 로그를 동적으로 샘플링 할 수 없는 경우 애플리케이션 성능에 악영향
         . 어플리케이션 성능, 디버깅 용도 외에 시스템 분석용으로 활용
         . 로그를 스트림으로 처리하여 최소한의 index로 대용량 데이터를 처리(Kafka의 KSQL를 사용하여 실시간 스트리밍 검색 가능)

      2) Metrics
         . 시스템의 특정시점에서의 측정
         . 시간 간격에 따라 측정된 데이터의 숫자 표현(숫자는 저장, 처리, 압축 및 검색에 최적화)
         . 과거 추세를 반영하는데 적합
         . 로그는 이벤트가 발생할 때마다 수집하지만 메트릭은 고정된 시간간격으로 수집(해상도)

      3) Tracing
         . Scope

----- MSA환경에서 중앙 집중형 로깅 조건
      . 모든 메시지를 수집할 수 있는 능력
      . 트랜잭션을 추적할 수 있는 능력
      . 로그 메시지를 분석할 수 있는 능력

----- 구성요소
      1) 로그 스트림(log stream) : 일반적으로 application의 Log4J, 센서 등
      2) 로그 적재기(log shipper) : 메시지를 데이터베이스에 쓰거나 대시보드에 푸시하거나 실시간 처리를 담당하는 스트림 처리 종단점으로 보내는 역할
      3) 로그 저장소(log store) : 실시간 분석, 트렌드 분석 등을 위해 모든 로그 메시지를 저장
      4) 로그 스트림 처리기 : 신속한 의사 결정에 필요한 실시간 로그 이벤트를 분석하여 대시보드로 정보를 전송하거나, 알람 공지 등의 역할
      5) 로그 대시보드 : 로그 분석 결과를 그래프나 차트로 보여주는 역할

----- 제품
      . Opensource : ELK(E-Logstash-K), EFK(E-FluentD-K), Grafana, Prometheus
      . SaaS : AWS CloudWatch, GCP Stackdriver, Azure Monitor
      . 상용 : Datadog

----- ELK Stack
      . Elastic Search : 데이터 저장 및 분석
      . Logstash : 로그 데이터 수집, 필터링 등
      . Kibana : 분석 데이터 시각화

----- EK Stack
      ELK 구성 시 Stack(Filebeat)과 Logstash간에 기본적으로 ssl설정이 필요하므로, 이 설정을 하지 않으려고 Stack(Filebeat)에서 바로 Elasticsearch:9200 으로 직접 데이터를 전송

----- Prometheus
      . 오픈소스 기반 모니터링 시스템
      . Grafana로 시각화
      . 풀링하는 순간의 스냅샷을 보여주는 근사치
      . 싱글 호스트 기반으로 확장 불가능하며, 다운되거나 리스타트하게 되면 이전 메트릭(모니터링 데이터)은 유실된다.

----- SpringBoot의 logback 사용
      logback에서 console, file, socket(logstash/fluentD)으로 출력하는 appender 정의

----- Logstash Vs. FluentD
      . LogStash(일반적/popular)
        - On-Memory queue로 인하여 재시작 시 지속성을 위해 External queue(Redis, Kafka등)의 의존도 필요
        - 엔터프라이즈급 지원하지 않음
      . FluentD(권장)
        - in-memory 또는 디스크를 활용할 수 있는 고도화된 버퍼링 시스템
        - 엔터프라이즈급 지원(유료)

----- Sleuth-Zipkin
      . Sleuth : traceId 관리
      . Zipkin : traceId 기반으로 Application Trace를 시각화

      이슈: Spring의 AutoConfig 특성으로 인하여 Data Access방식에 유의해야 함. default datasource 사용시 Zipkin 모듈과 My JDBC 설정이 충돌됨.
      따라서 jdbc모듈을 사용하는(MySQL 등) 프로젝트에서는 work-around방안으로 spring-boot-configuration-processor를 활용하여야 함.

      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-configuration-processor</artifactId>
      </dependency>

      이슈: zipkin 데이터를 영구저장하기 위해 storage를 openzipkin/zipkin-cassandra로 설정할 경우
      1. 해당 공유 disk directory의 other권한을 rwx로 주거나
      2. 해당 공유 disk directory 생성을 cassandra 계정으로 생성
      3. openzipkin/zipkin-cassandra의 Span Data(추적데이터)가 local volume에 저장되는 메커니즘 확인 필요(저장이 안됨)
      4. zipkin-dependencies는 의존성 다이어그램을 그릴수 있도록 지원하는 모듈

----- Jaeger
      Sleuth-Zipkin과 유사한 추적관리 오픈소스

      > build.gradle
      compile 'io.opentracing.contrib:opentracing-spring-jaeger-web-starter:3.2.2'
      compile 'io.opentracing.contrib:opentracing-spring-cloud-starter:0.5.9'
      * opentracing-spring-cloud-starter를 설정하지 않으면 서비스별로 trace됨(서비스 연결 무시)

      > application.yml
      opentracing:
        jaeger:
          service-name: yongs-user # jaeger service Name
          udp-sender:
            host: XX.XX.XX.XX # jaeger server id
            port: XXXX # jaeger udp Port

      설정만하면 zipkin과 동일하게 trace가 되고 로그파일에 traceId:spanId:parent-span-id:1 형식으로 로깅됨. 마지막 1혹은0은 Trace가 collector에 수집된 경우는 1, 수집되지 않은 경우 0
      예) a32e8b6860ccad25:a32e8b6860ccad25:0:1

      특정 구간에서 logging을 할 경우
      >> java
      @Autowired
      private Tracer tracer;
        ...

        Span parentSpan = tracer.scopeManager().activeSpan();
        Span spanPase1 = tracer.buildSpan("spanPase_1").asChildOf(parentSpan).start()
        ...
        try {
          spanPase1.log("어쩌구 블라블라 => " + req.getHeaders());
          ...
        }

----- logging Vs. tracing
      많은 사례를 참조해 보면 로깅과 추적은 별도로 처리되고 있으며, 모든 애플리케이션 로그를 추적기에 추가하는 것은 좋은 생각이 아님. 거꾸로 모든 어플리케이션 로그에 trace id + span id를 넣는것이 바람직하다.

----- tracing 연관성 메커니즘
      opentracing-spring-jaeger-cloud-starter is support spring boot 2.2.x but 2.3.x not support , greater than Cloud Sr5 is not support

----- Aspect logging
      @Around("@annotation(yongs.temp.aop.logging.YongsExecutionTime)") 어노테이션 방식으로 AOP를 걸었을때, @RestController, @Service, @Repository와 같은 @Component 계열만 가능함. 즉, 일반 POJO 클래스에서는 작동하지 않음. 
