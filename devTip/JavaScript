----- JavaScript 변수
      . var: function-scope
        * 즉 if{}, for{} 내에서 var를 선언해도 로컬변수가 아니다.
      . let: block-scope, 재선언 불가능, 변수값 변경 가능
        # let a = 'test'
        # let a = 'test2' // Error
        # a = 'test3'     // 가능
      . const: block-scope, 재선언 불가능, 변수값 변경 불가능
        # const a = 'test'
        # const a = 'test2' // Error
        # a = 'test3'       // Error

----- sort : 오름차순/내림차순
      let arr = [77, 6, 99, 5, 59, 27, 13, 88, 2]
      arr.sort( (a, b) => b - a)

----- 배열의 map & filter : Foreign Key 값의 value 추가하기(join과 유사)
      data.map( item => {return {...item, user_name: userdata.filter(userItem => userItem.id === item.id)[0].name}})
      but, 보통 Foreign Key를 저장하지 않고 NoSql을 사용하여 바로 해당 data를 넣는것이 바람직하다.
      {key: value}처럼 JSON형식으로 user_name이라는 key로 id에 맵핑되어 있는 이름을 return 하게 됨.{user_name: "홍길동"}

----- Promise
      프로미스는 주로 서버에서 받아온 데이터를 비동기적으로 화면에 표시할 때 사용(callback과 유사)
      then 함수를 이용하여 단계적으로 로직을 처리할 수 있음

      getData(userInfo)
        .then(parseValue)
        .then(auth)
        .then(diaplay);

      예) var userInfo = {
            id: 'test@abc.com',
            pw: '****'
          };

          function parseValue() {
            return new Promise({
              // ...
            });
          }
          function auth() {
            return new Promise({
              // ...
            });
          }
          function display() {
            return new Promise({
              // ...
            });
          }

      https://joshua1988.github.io/web-development/javascript/promise-for-beginners/#promise%EA%B0%80-%EB%AD%94%EA%B0%80%EC%9A%94
