----- 쿠버네티스 클러스터 인증 정보 획득
      #gcloud container clusters get-credentials CLUSTER_NAME

----- 구글 클라우드에 생성된 클러스터 정보 읽어오기
      #gcloud container clusters list

----- 도커 이미지등록을 위한 인증
      #gcloud auth configure-docker

----- 도커 이미지 저장
      #docker push gcr.io/yongs-250012/hello-test:v1

----- RC(Replication Controller) 등록
      #kubectl create -f hello-test-rc.yaml
................................................... 
apiVersion: v1
kind: ReplicationController
metadata:
  name: hello-test-rc
spec:
  replicas: 3
  selector:
    app: hello-test
  template:
    metadata:
      name: hello-test-pod
      labels:
        app: hello-test
    spec:
      containers:
      - name: hello-test
        image: gcr.io/yongs-250012/hello-test:0.1
        imagePullPolicy: Always      # 컨테이너 생성시마다 이미지 리파지토리에서 새 이미지를 가져옴
        ports:
        - containerPort: 8080
...................................................

----- Deployment 등록
      #kubectl create -f db-test-deloyment.yaml
...................................................
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-test-deployment
spec:
  replicas: 2
  minReadySeconds: 5
  selector:
    matchLabels:
      app: db-test
  template:
    metadata:
      name: db-test-pod
      labels:
        app: db-test
    spec:
      containers:
      - name: db-test
        image: gcr.io/yongs-250012/db-test:0.1
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: db-test-config-map
              key: db.host
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: db-test-config-map
              key: db.port
...................................................

----- Deployment Rollback
      #kubectl rollout undo deployment/db-test-deloyment

----- POD 리스트 조회
      #kubectl get pod

----- 특정 POD 정보 조회
      #kubectl describe pod hello-test-rc-xx2d

----- (외부) Service 등록
      #kubectl create -f hello-test-svc.yaml
...................................................
apiVersion: v1
kind: Service
metadata:
  name: hello-test-svc
spec:
  selector:
    app: hello-test
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8080
  type: LoadBalancer
  sessionAffinity: ClientIP    # Hash 방식
  loadBalancerIP: 35.200.64.17 # Service가 삭제되도 계속 유효한 정적 IP 생성
...................................................

----- Service 정보 조회
      #kubectl get svc

----- POD Scaling
      #kubectl scale --replicas=3 rc/hello-test-rc

----- 정적 IP 생성
      #gcloud compute addresses create hello-test-ip-region --region asia-northeast1

----- Service 삭제
      #kubectl delete svc --all

----- RC 삭제
      #kubectl delete rc --all

----- POD 삭제
      #kubectl delete pod --all

----- GCP 쿠버네티스 POD shell에 접속
      #kubectl exec -it hello-test-rc-xx2d sh

----- GCP Ingress는 L7역할(gateway)을 수행함(Spring의 zuul과 유사)

----- Ingress 생성
      #kubectl create -f ingress-test.yaml
...................................................
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ingress-test
  annotations:
  	kubernetes.io/ingress.global-static-ip-name: "ingress-global-ip" # 정적 IP 생성후 등록
spec:
  rules:
  - http:
      paths:
      - path: /hello
        backend:
          serviceName: hello-test-node-svc
          servicePort: 80
      - path: /world
        backend:
          serviceName: world-test-node-svc
          servicePort: 80
...................................................

----- Ingress 삭제
      #kubectl delete ingress ingress-test

----- Ingress의 backend app는 health check를 위해 "/" 호출이 가능해야함.(생성시간도 오래걸림)
      @GetMapping("/")
      public String home() throws Exception{
        return "home";
      }

----- docker image 이름 변경
      #docker tag mariadb:latest gcr.io/yongs-250012/mariadb:v1

----- Namespace 생성
      kubectl create namespace test

----- Namespace 적용
      kubectl apply -f pod.yaml --namespace=test

      혹은 YAML 파일의 metadata에 명시

      apiVersion: v1
      kind: Pod
      metadata:
        name: mypod
        namespace: test

----- Namespace 조회
      kubectl get pod --namespace=test
