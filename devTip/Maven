----- Nexus 설정
      $ mkdir /some/dir/nexus-data && chown -R 200 /myhome/dir/nexus-data
      $ docker run --name nexus -p 9011:8081 -v /myhome/dir/nexus-data:/nexus-data -d --rm sonatype/nexus3

----- Nexus Repository Type
      . proxy: 말그대로 외부의 다른 경로를 proxy하는 저장소입니다. 이 proxy를 통해 외부(공식 라이브러리 저장소 등)의 데이터를 캐시할 수 있습니다.
      . hosted: 자체 모듈 저장소입니다.
      . group: proxy 와 hosted 들을 묶을 수 있는 단위 집단입니다. 그룹에 저장소를 나열하는 순서가 그룹의 라이브러리를 탐색 우선순위가 됩니다.

----- Nexus Repository 속성
      . snapshots: snapshot은 같은 버전으로 여러 번 배포가 가능한 수시로 릴리즈 되는 바이너리를 배포하는 장소
      . release: release는 같은 버전으로 한번 밖에 배포할 수 없는 정식 릴리즈를 통해 배포되는 바이너리를 저장하는 장소(다시 배포하려면 서버에서 지우고 배포)

----- POM 상속
      코드의 중복을 extends로 해결하듯이 설정의 중복을 줄이기 위해 POM상속을 이용한다.
      즉, 하위 프로젝트 모듈에서는 해당 모듈에 필요한 설정만 유지하도록 한다.

----- Maven 종속 프로젝트 참조
      mvn install 명령어를 수행하면 해당 project가 local repository인 .m2/ 에 저장이 되므로 다른 프로젝트에서 참조 가능하다

----- 종속 lib 프로젝트
      1. lib 프로젝트에서 gradle publish 하고
      2. app 프로젝트에서 maven install

----- Gradle 3.0부터
      compile이 deprecated --> implementation 사용
      testComile -> testImplmentation

----- gradle TEST 설정
      gradle only Test는 debug용으로는 부적합하므로
      . local환경에서는 useJUnitPlatform()으로 수행하고
      . server환경에서는 test time이점이 있을 수 있다.

      * SpringBoot에서 default로 build.gradle에 JUnitPlatform()을 이용하는 설정
        test {
          useJUnitPlatform()
        }

----- Gradle dependency
      . Gradle3.x부터 compile이 api와 implementation으로 분리됨(compile은 Gradle3.0부터 deprecated, Gradle7.0부터 removed)

      1) api(기존 compile과 동일)
          A: build.gradle에서
             dependencies {
                api 'org.sample:B:1.0.0'
             }
          B: build.gradle에서
             dependencies {
                api 'org.sample:C:1.0.0'
             }

          이럴경우 A는 B/C와 dependency가 발생한다.(A <- B, A <- C)

      2) implementation
          A: build.gradle에서
             dependencies {
                implementation 'org.sample:B:1.0.0'
             }
          B: build.gradle에서
             dependencies {
                implementation 'org.sample:C:1.0.0'
             }

          이럴경우 A는 B와 dependency가 발생한다.(A <- B)
          단, A에서 C를 참조할 수 없으며, 참조할 경우 error가 발생한다.

        . api로 정의하면 C모듈 변경시 관련된 모든 모듈(A, B)이 재컴파일 대상이 되며,
        . implementation로 정의하면 C모듈 변경시 관련된 모듈(B)만 재컴파일 대상이 된다.

      3) compileOnly
         compile 시에만 빌드하고 빌드 결과물에는 포함하지 않음

      4) runtimeOnly
         runtime 시에만 필요한 라이브러리인 경우

      5) testImplementation
         빌드과정에서 배포본에 포함되지 않음
